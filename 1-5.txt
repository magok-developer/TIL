★ Git 이란?

  ☆ Git을 사용하는 이유

    · 효율적인 협업
      ·여러명이 수정을 해도 쉽게 코드를 합칠 수 있음

    · 쉬운 버전 관리 (스냅샷 형태)

  ☆ Git의 특징

    · 가지 치기와 병합
      · 여러가지 작업을 할 수 있다.
      · 메인코드에서 독립성을 유지한채 다른 개발을 진행 할 수 있다.
      · 여러 개발과 테스트를 가지 치기 한 후 메인 코드에 반영(병합) 후 배포 할 수 있다
      · 각각의 작업에 따라 독립성이 유지 되기 때문에 편리하고 협업에 도움된다.

    · 가볍고 빠르다
      ·git은 모든 작업이 대부분 서버와의 통신 없이 로컬에서 진행된다
    
    · 분산 작업
      · 복사된 프로젝트에서 동시에 작업이 가능
      · 각각의 개발자의 연결이 단절 되어도 개발에 문제가 없다
    
    · 데이터 보장
      · 프로젝트의 무결성을 보장
      · 모든 파일은 체크섬이라는 검사 과정을 거침 (16진수 문자열로 이루어져 있음 = commit ID)
      · commit ID 가 같은 것은 파일 또는 구성이 완벽히 같다는 것 = 누가 어느 파일을 작업했는지 기록이 남기 때문에 버전 관리가 편하다

    · 준비 영역 (staging area)
      · 수정한 내용을 repository에 반영 하기 전 검토하는 단계
      [working directory] -git add-> [staging area] -git commit-> [repository]
    
    · 오픈 소스
      · 소스 코드를 공개한 상태에서 인터넷에 누구나 프로젝트의 발전에 기여 할 수 있는 것
    
    · Git 호스팅 서비스
      · GitHub
      · Bitbucket
      · GitLab

  ☆ Git 설치와 초기 설정

    · 이름 설정
     git config --global user.name "jw"

    · 이메일 설정
     git config --global user.email "hajw.study@gmail.com"
    
    · 설정 확인
     git config --list

  ☆ Git 저장소 생성
    · git init
     · cd 명령어로 폴더에 들어간뒤 git init 실행
     · git init ./폴더 위치/폴더명
  
  ☆ git 명령어
    git version : git의 버전 확인

    git init : git저장소 생성

    git config --global user.name "이름" : git관련 작업 기록에 남는 이름 수정

    git config --global user.email "이름" : git관련 작업 기록에 남는 이름 수정

    git config --list : git 설정 확인

★ Git 시작하기

  ☆ git 파일 생성

    · 새로운 파일을 (ex.comment.js) 준비 영역 (staging area)으로 보내야함
      git add 명령어를 사용
      $ git add comment.js

    · git status 명령어로 staging area의 어떤 파일이 변경 되었는지 등의 파일의 상태를 확인 할 수 있다

  ☆ git 저장소

    · commetn.js 파일 작업을 준비 영역에 업로드 하였으므로 이제 무엇을 수정하고 추가했는지 메세지를 남겨 저장소에 저장하는 작업

    · git commit 이라는 명령어로 .git 저장소 내에 staging 파일 저장

    · 옵션 -m을 이용하여 commit 메세지를 넣어줄 수도 있다
      생략 가능하지만 반영한 내용을 추후에 쉽게 알 수 있도록 적잘한 메세지를 넣어주는 것이 좋다
      $ git commit -m "blah blah"

    · 저장소 반영 내용 변경
      앞에서 적은 메세지에 오타가 있거나 누락된 파일이 있을 경우 --amend 옵션을 이용하여 commit 수정

    · 저장소 반영 내역을 확인하고 싶다면 git log 명령어를 사용

  ☆ git 관리 상태 확인

    · git status
      staging file (준비영역에 있는 파일) 들의 상태 확인
    
    · git log
      git repository에 존재하는 history 확인
      저장소 반영 내역을 확인 할 수 있다

      · log 옵션
        -p, --patch : 각 commit의 수정 결과를 보여주는 diff와 같은 역할을 수행

        -n(숫자) : 상위 n개의 commit만 보여준다

        --stat : 어떤 파일이 commit에서 수정되고 변경 되었는지, 파일 내 라인이 추가되거나 삭제되었는지 확인

        --pretty=oneline : 각 commit을 한 줄로 출력

        --graph : commit간의 연결된 관계를 아스키 그래프로 출력

        -S : 코드에서 추가되거나 제거된 내용 중 특정 텍스트가 포함 되어있는지 검사

    · git diff
      commit 된 파일 중 변경된 사항을 비교

★ Git  가지 치기

  ☆ Git Branch

    · 독립적으로 어떤 작업을 진행하기 위한 개념
    · 각각의 Branch는 다른 Branch의 영향을 받지 않음

    · Git Branch의 종류
      · 메인 Branch
        배포할 수 있는 수준의 안정적인 Branch

      · 토픽 Branch
        기능 추가나 버그 수정과 같은 단위 작업을 위한 Branch

    · Git Branch 생성
      $ git branch 이름

    · Git Branch 전환
      $ git branch
      $ git checkout 이름 (new branch)

    · Git Navigation
      · checkout은 branch를 전환하는데 사용할 수 도 있고 git log로 확인한 snapshot을 넘나들때도 사용이 가능
        git checkout 16진수로 이루어진 snapshot hash
      · snapshot의 hash 값을 이용하여 과거의 파일 내용을 확인 할 수 있다

  ☆ fast forward

    · 새로운 체크 포인트로 이동?

  ☆ Merge

    · 먼저 master branch로 이동 하여 new branch를 병합한다
      $ git checkout master
      $ git merge new branch

    · new branch의 내용이 master branch에서 업데이트 된 내용이기 때문에 곧바로 merge가 되는 것을 확인 할 수 있다
      이렇게 merge가 이루어지는 것을 fast-forward 라고 한다

    · 갈라지는 branch
      · 파일을 동시에 수정하는 경우
        git log --graph --all 명령어를 사용하면 commit graph를 확인 할 수 있다

      · git checkout master를 이용하여 master로 checkout한 후 git merge new branch로 merge
      $ git checkout master
      $ git merge new branch

    · git branch --merged 명령어를 통해 merge된 branch를 볼 수 있다

    · git branch 삭제
      사용을 마친 branch는 git branch -d new branch 명령어를 이용하여 삭제 할 수 있다


  ☆ merge conflict(충돌) 해결

    · merge한 두 branch에서 같은 파일을 변경 했을 때 충돌 발생

    · git status 명령어로 어느 파일에서 충돌이 발생했는지 확인 가능하다

    · 수정 완료 후
      <<<<< ===== >>>>> 등의 특수 기호가 포함된 행을 삭제해준다
      git add, git commit 과정을 거쳐 다시 merge 해준다

    · git merge 충돌 방지
      master branch의 변화를 지속적으로 가져와서 충돌이 발생하는 부분을 제거

★ Git 원격 저장소

  ☆ 원격 저장소 받아오기
    
    · 인터넷이나 네트워크 어딘가에 있는 저장소

    · github, gitlab 등 호스팅 서비스

    · git clone 명령어를 통해 기존의 git repository를 복사
      
      · github 또는 gitlab에서 원하는 프로젝트에서 clone 버튼을 누른다
      · clone with HTTPS 옵션으로 clone을 한다
      · git clone 뒤에 clone 버튼으로 확인한 원격 저장소의 주소를 넣어준다

      $ git clone https://gitlab.com/blah/blah.git

    · 원격 저장소 추가

      · git remote add 명령어로 연결 할 수 있다.

      $ git remote add origin https://gitlab.com/group/project

    · 연결된 원격 저장소 확인

      · git remote

      $ git remote show origin

    · 원격 저장소 이름 변경

      · rename 명령어를 사용

      $ git remote rename origin git_test -> origin 에서 git_test로 이름 변경

    · 주소가 변경 되었거나, 필요 없어진 저장소는 rm 명령어로 삭제할 수 있다

    $ git remote rm git_test

  ☆ 원격 저장소 동기화

    · 저장소 갱신

      · pull
        원격 저장소에서 데이터 가져오기 + 병합 (merge)
        원격 저장소에서 데이터를 가져와 로컬 데이터와 병합한다

        $ git pull

      · fetch
        원격 저장소에서 데이터 가져오기
        git log 명령어로 변경된 파일을 확인하고 merge 해준다

    · 저장소 발행
  
      · 로컬 저장소에서 작업한 내용을 원격 저장소에 반영한다
      · 다른사람이 뭔저 push한 상태에서는 push 할 수 없다
        다른사람이 작업한 것을 먼저 merge 해야한다

      $ git push

    · 요약

      · git remote add origin (또는 다른 원격 저장소 이름) 으로 로컬 저장소와 연결
      · git fetch 또는 git pull 을 이용하여 원격저장소의 내용을 동기화
      · fetch를 실행한 경우 git merge origin/master로 병합
      · git push origin master 를 이용하여 변경된 사항을 원격 저장소에 전달

  ☆ Origin 이란?

    git remote add origin https://github.com/group/project

    · 원격 저장소의 단축 이름을 origin으로 지정한다는 의미
    · origin이 아닌 다른 이름으로 원격 저장소의 이름을 지정해 줄수 있다
    · 기본적으로 만들어진 원격 저장소의 이름은 origin이 default값 이다
      clone으로 복사해온 저장소의 이름은 origin으로 통일되게 된다
    · -v 옵션을 사용하면 지정한 저장소의 이름과 주소를 함께 볼 수 있다

    $ git remote -v
  