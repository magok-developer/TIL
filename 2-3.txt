★ DOM 이란?

  · 문서 객체 모델
    Document Object Mdel
    객체 지향 모델로써 구조화된 문서를 표현하는 형식

  · HTML 문서에 대한 인터페이스
    DOM은 XML이나 HTML 문서의 프로그래밍 인터페이스
    DOM은 문서의 구조화된 표현을 제공하여 프로그래밍 언어가 문서 구조, 스타일, 내용 등을 변경할 수 있도록 한다.
  
  · Core DOM : 모든 문서 타입을 위한 DOM 모델
  · HTML DOM : HTML 문서를 위한 DOM 모델
  · XML DOM : 문서를 위한 DOM 모델

  ☆ HTML DOM
    HTML 문서를 조작하고 접근하는 표준화된 방법
    모든 HTML 요소는 HTML DOM을 통해 접근 가능

  ☆ XML DOM
    XML 문서에 접근하여 그 문서를 다루는 표준화된 방법을 정의
    모든 XML 요소는 XML DOM을 통해 접근 가능

  ☆ Document 객체
    웹 페이지 자체를 의미한다.
    웹 페이지에 존재하는 HTML 요소에 접근하고자 할 때는 반드시 Document 객체부터 시작해야 한다.

  ☆ Document 메소드
    · HTML 요소의 선택
    · HTML 요소의 생성
    · HTML 이벤트 핸들러 추가
    · HTML 객체의 선택

    · HTML 요소의 선택
      document.getElementById() : 해당 아이디의 요소를 선택
      document.getElementsByclassName() : 해당 클래스에 속한 요소를 선택
      document.getElementsByName() : 해당 name 속성값을 가지는 요소를 선택
      document.querySelectorAll() : 해당 선택자로 선택되는 요소를 모두 선택
      document.querySelector() : 해당 선택자로 선택되는 요소를 1개 선택

    · HTML 요소의 생성
      document.createElement() : 지정된 HTML 요소를 생성
      document.write() : HTML 출력 스트림을 통해 텍스트를 출력

    · HTML 이벤트 핸들러 추가
      요소.onclick = function(){} : 마우스 클릭 이벤트와 연결될 이벤트 핸들러
      
★ 자바스크립트와 DOM

  ☆ DOM 요소의 선택

    · var selectedItem = document.getElementsByTagName("li");
      HTML <li> 요소를 선택
    
    · var selectedItem = document.getElementById("id");
      아이디가 "id"인 요소를 선택

    · var selectedItem = document.getElementsByclassName("odd");
      클래스가 "odd"인 요소를 선택

    · var selectedItem = document.getElementsByName("first");
      name 속성값이 "first"인 요소를 선택
  
  ☆ DOM 요소의 스타일 변경

    · var selectedItem = document.getElementById("even");
      selectedItem.style.color = "red";

      아이디가 "even"인 요소를 선택 -> 선택도니 요소의 텍스트 색상을 변경
  
  ☆ DOM 요소의 내용 변경

    · var str = document.getElementById("text");
      str.innerHTML = "요소의 내용을 바꿉니다.";

      아이디가 "text"인 요소를 선택 -> 선택돈 요소의 내용을 변경
  
★ Node 객체

  ☆ 노드(node)와 노드 트리
    HTML DOM에서 정보를 저장하는 계층적 단위

    · 노드 트리는 노드들의 집합으로, 노드간의 관계를 나타낸다.

    · 자바스크립트에서는 HTML DOM을 이용하여 노드 트리에 포함된 모든 노드에 접근할 수 있다.
  
  ☆ 노드 간의 관계
    노트 트리의 모든 노드는 서로 계층적 관계를 맺고 있다.
  
  ☆ 노드의 종류

    · 문서 노드 (document node)
      HTML 문서 전체를 나타내는 노드

    · 요소 노드 (element node)
      모든 HTML 요소는 요소 노드로, 속성 노드를 가질 수 있는 유일한 노드간의
    
    · 주석 노드 (comment node)
      HTML 문서의 모든 주석은 주석 노드

    · 속성 노드 (attribute node)
      모든 HTML 요소의 속성은 속성 노드이며, 요소 노드에 관한 정보를 가진다.
      하지만 해당 요소 노드의 자식 노드 (child node)에는 포함되지 않는다.

    · 텍스트 노드 (text node)
      HTML 문서의 모든 텍스트는 텍스트 노드

  ☆ 노드의 값
    노드에 대한 정보는 다음과 같은 프로퍼티를 통해 접근할 수 있다.
    
    · nodeName : 이름
    · nodeValue : 값
    · nodeType : 타입

    document.childNodes[0].nodeName;
    HTML 문서의 모든 자식 노드 중에서 첫 번째 노드의 이름을 선택

    document.getElementById("heading").firstChild.nodeValue;
    아이디가 "heading"인 요소의 첫 번째 자식 노드의 노드값을 선택

    document.getElementById("heading").firstChild.nodeType;
    아이디가 "heading"인 요소의 첫 번째 자식 노드의 타입을 선택

★ 이벤트 (Event)

  · 웹 브라우저가 알려주는 HTML 요소에 대한 사건의 발생
    자바스크립트는 발생한 이벤트에 반응하여 특정 동작을 수행할 수 있다.

  ☆ 이벤트 타입
    발생한 이벤트의 종류

    <p onclick="changeText(this)">여길 클릭하세요</p>
    
    <script>
    function changeText(element) {
      element.innerHTML = "내용이 바뀌었습니다";
    }
    </script>
    마우스 클릭 이벤트 예시

    * 간단하게 적는법
    <p onclick="this.innerHTML='성공입니다'">여길 클릭하세요</p>

  ☆ 이벤트 핸들러
    이벤트가 발생했을 때 그 처리를 담당하는 함수
    지정된 이벤트가 발생하면, 웹 브라우저는 그 요소에 등록된 이벤트 핸들러를 실행시킨다.

    window.onload = function () { // 이 함수는 HTML 문서가 로드될 때 실행됨.
      var text = document.getElementById("text"); // 아이디가 "text"인 요소를 선택함.

      text.innerHTML = "HTML 문서가 로드되었습니다.";
    }

★ 추가적으로 사용되는 기능

  · e.preventDefault();
    특정 기능 정지 메서드

  · xxx.querySelector("#intro");
    1개의 태그를 css 선택자 기반으로 가져온다

  · xxx.querySelectorAll("a");
    여러 개의 태그를 css 선택자 기반으로 가져온다.

  · xxx.getAttribute("href");
    특정 태그가 갖고 있는 속성의 속성값을 가져온다.
  
  · windoe.scrollTo({ // 특정 지점으로 스크롤링
      'behavior': 'smooth', // 부드럽게 이동
      'top': xxx.offsetTop // 특정 영역의 위에서의 좌표값
  })

  · setInterval(function() {
      ...
    }, 3000); // 3초 간격으로 반복적으로 코드 실행
    
    xxx.animate({
      marginLeft: ["0px", "1024px"]
    }, {
      duration: 500,
      easing: "ease",
      iterations: 1,
      fill: "both"
    }) // 애니메이션 실행

  · xxx.classList.remove(클래스명)
    요소에서 특정 클래스 제거

  · xxx.classList.add(클래스명)
    요소에 클래스명 추가

  · nodeList.forEach(function(item) {
    console.log(item)
  })
    배열의 모든 요소에 코드 적용
  
  · xxx.previousElementSibling;
    이전 요소 선택

  · xxx.netElementSibling;
    다음 요소 선택

  · xxx.parentElement;
    부모 요소 선택

  · xxx.firstElementChild;
    첫번째 자식 요소 선택

  · xxx.lastElementChild;
    마지막 자식 요소 선택